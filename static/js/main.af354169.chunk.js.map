{"version":3,"sources":["app.module.css","component/AddItem.jsx","App.jsx","serviceWorker.js","index.jsx","component/AddItem.module.css"],"names":["module","exports","BlockItem","props","className","classes","toDoItem","ifChecked","checkedText","toDoItemText","text","checked","toDoItemCheck","onClick","check","toDoItemDelete","delete","App","state","addItem","toRend","storage","length","Object","keys","key","push","JSON","parse","getItem","this","setState","event","inputValue","target","value","indexOf","trim","localStorage","setItem","obj","index","clear","forEach","e","splice","onload","main","toDoWrapper","head","clearAll","clearAllHandler","bind","inputWrapper","type","inputAdd","onChange","inputListener","autoFocus","addToDoItem","addNewItem","toDoListExistingWrapper","line","toDoListWrapper","map","checkHandler","deleteHandler","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.af354169.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"app_main__2vTyq\",\"toDoWrapper\":\"app_toDoWrapper__1Gi3e\",\"head\":\"app_head__1b83w\",\"inputWrapper\":\"app_inputWrapper__3axWl\",\"inputAdd\":\"app_inputAdd__s-1Jb\",\"addToDoItem\":\"app_addToDoItem__9YF1g\",\"line\":\"app_line__32oDA\",\"toDoListExistingWrapper\":\"app_toDoListExistingWrapper__2lMf3\",\"toDoListWrapper\":\"app_toDoListWrapper__1_Gl6\",\"clearAll\":\"app_clearAll__vlNP3\"};","import React from \"react\";\r\nimport classes from \"./AddItem.module.css\";\r\n\r\nconst BlockItem = props => {\r\n  return (\r\n    <li className={classes.toDoItem}>\r\n      <div className={props.ifChecked === true ?\r\n                      classes.checkedText\r\n                      :classes.toDoItemText}>\r\n          {props.text}\r\n      </div>\r\n      <div className={props.ifChecked === true ?\r\n                       classes.checked\r\n                       :classes.toDoItemCheck}\r\n            onClick={() => props.check(props)}>\r\n      </div>\r\n      <div className={classes.toDoItemDelete}\r\n           onClick={() => props.delete(props)}\r\n      ></div>\r\n    </li>\r\n  );\r\n};\r\nexport default BlockItem;\r\n","import React from 'react';\nimport classes from \"./app.module.css\";\nimport BlockItem from \"./component/AddItem\";\n\nclass App extends React.Component {\n  state = {\n    addItem: [],\n    toRend:[],\n  }\n  inputValue;\n  onload(storage){\n    if(storage.length > 0){\n      const keys = Object.keys(storage),\n            toRend = [];\n      for(let key of keys){\n        if(key === \"loglevel\")continue;\n        toRend.push([key, JSON.parse(storage.getItem(key))])\n      }\n      this.setState({\n        toRend:toRend\n      })\n\n    }\n  }\n  inputListener(event){\n    this.inputValue = event.target;\n    this.setState({\n      addItem: [ event.target.value, false,]\n    })\n  }\n  addNewItem(){\n    let toRend = this.state.toRend,\n        addItem = this.state.addItem\n    if(toRend.indexOf(addItem) === -1 && addItem[0].trim() !== \"\"){\n      localStorage.setItem(addItem[0],addItem[1]);\n      toRend.push(addItem);\n      this.setState({\n        toRend: toRend\n      })\n      this.inputValue.value = \"\";\n\n    }\n  }\n\n  checkHandler(obj){\n    const toRend = this.state.toRend;\n    toRend[obj.index][1] = !toRend[obj.index][1];\n    localStorage.clear();\n    toRend.forEach(e => localStorage.setItem(e[0],e[1]))\n    this.setState({\n      toRend: toRend\n    })\n  }\n  deleteHandler(obj){\n    const toRend = this.state.toRend;\n    toRend.splice(obj.index,1);\n    localStorage.clear();\n    toRend.forEach(e => localStorage.setItem(e[0],e[1]))\n    this.setState({\n      toRend: toRend\n    })\n  }\n  clearAllHandler(){\n    localStorage.clear();\n    this.setState({\n      toRend: []\n    })\n  }\n  componentDidMount(){\n    this.onload(localStorage)\n  }\n  render(){\n\n    return (\n      <main className={classes.main}>\n        <div className={classes.toDoWrapper}>\n          <div className={classes.head}>ToDo list\n            <button className={classes.clearAll}\n                    onClick={this.clearAllHandler.bind(this)}>\n            </button>\n          </div>\n          <div className={classes.inputWrapper}>\n            <input type=\"text\"\n                  className={classes.inputAdd}\n                  onChange={event => this.inputListener(event)} autoFocus={true}/>\n            <button className={classes.addToDoItem} onClick={this.addNewItem.bind(this)}>\n            </button>\n          </div>\n          <div className={classes.toDoListExistingWrapper}>\n            <div className={classes.line}></div>\n            <ul className={classes.toDoListWrapper}>\n              { this.state.toRend.length > 0 ?\n                 this.state.toRend.map((e, index) =>\n                   <BlockItem key={index}\n                              index={index}\n                              ifChecked={e[1]}\n                              check={this.checkHandler.bind(this)}\n                              delete={this.deleteHandler.bind(this)}\n                              text={e[0]}/>\n                  )\n                 : null }\n            </ul>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toDoItem\":\"AddItem_toDoItem__2cmLg\",\"toDoItemCheck\":\"AddItem_toDoItemCheck__jl7nd\",\"checked\":\"AddItem_checked__1FNi7\",\"toDoItemText\":\"AddItem_toDoItemText__2tOZ6\",\"toDoItemDelete\":\"AddItem_toDoItemDelete__2Mpd_\",\"checkedText\":\"AddItem_checkedText__37nvA\"};"],"sourceRoot":""}